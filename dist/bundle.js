!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class n{constructor(){this._id,this._health={basic:null,current:null},this._experience={basic:null,current:null},this._basicDmg,this._isAlive=!0,this._level=1,this._coins=0}get id(){return this._id}get health(){return this._health}get experience(){return this._experience}get basicDmg(){return this._basicDmg}get isAlive(){return this._isAlive}set isAlive(t){this._isAlive=t}get level(){return this._level}get coins(){return this._coins}set coins(t){this._coins=t}Attack(t){if(!1!==t.isAlive){let e=this._basicDmg;return t.takeDmg(e),e}}takeDmg(t){this._health.current>t?this._health.current=this._health.current-t:(this._health.current=0,this._isAlive=!1)}updateHealth(){this._health.basic+=1,this._health.current+=1}}class s extends n{constructor(t,e){super(),this._id="Hero",this._health={basic:t,current:t},this._experience={basic:50,current:0},this._basicDmg=e,this._healthPotions=6,this._coins=10}get healthPotions(){return this._healthPotions}set healthPotions(t){this._healthPotions=t}healHero(){let t=this._health.basic-this._health.current;if(!(this._health.current<this._health.basic&&0!==this._healthPotions))return!1;t>=5&&(this._health.current+=5),t<5&&(this._health.current+=t),this._healthPotions-=1}reviveHero(){this._isAlive=!0,this._health.current+=Math.round(this._health.basic/2)}levelUp(){this._level+=1,this._experience.basic+=this._experience.basic+Math.round(.1*this._experience.basic),this._health.basic+=5,this._health.current=this._health.basic,this._basicDmg+=3}gainExp(t){const e=10*t,i=this._experience.basic-this._experience.current;return e>=i?(this._experience.current=e-i,this.levelUp()):this._experience.current+=e,e}}class a{constructor(){this._cords={x:10,y:0}}get cords(){return this._cords}checkBorder(){return 0!==this._cords.y}moveUp(){!0===this.checkBorder()&&(this._cords.y-=10)}moveDown(){this._cords.y+=10}moveRight(){this._cords.x+=10}moveLeft(){this._cords.x-=10}}class r{constructor(){this._canvas=document.getElementById("maze"),this._ctx=this._canvas.getContext("2d"),this._player=new a,this._maze=this.displayMaze(this.generateMaze(25,25))}get player(){return this._player}start(){this.draw(),this.playerControls()}draw(){this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this.drawGrid(),this.drawMaze(),this.drawEndPoint(),this.drawPlayer()}drawGrid(){const t=this._ctx;t.fillStyle="rgb(192, 192, 192)",t.fillRect(0,0,510,510);for(let e=0;e<510;e+=10)t.moveTo(e,0),t.lineTo(e,510);for(let e=0;e<510;e+=10)t.moveTo(0,e),t.lineTo(510,e);t.strokeStyle="#ddd",t.stroke()}drawMaze(){const t=this._ctx;let e=0;this._maze.forEach(i=>{let n=0;i.forEach(i=>{!0===i&&(t.fillStyle="rgb(0, 0, 0)",t.fillRect(n,e,10,10)),n+=10}),e+=10})}drawPlayer(){const t=this._ctx;t.fillStyle="rgb(255, 0, 0)",t.fillRect(this._player.cords.x,this._player.cords.y,10,10)}drawEndPoint(){const t=this._ctx;t.fillStyle="rgb(0, 200, 0)",t.fillRect(500,490,10,10)}playerControls(){document.addEventListener("keydown",t=>{if(!0===this.checkWinner())return!0;switch(t.keyCode){case 37:this.checkMove("left")&&this._player.moveLeft(),this.draw();break;case 38:this.checkMove("up")&&this._player.moveUp(),this.draw();break;case 39:this.checkMove("right")&&this._player.moveRight(),this.draw();break;case 40:this.checkMove("down")&&this._player.moveDown(),this.draw()}})}checkMove(t){let e=this._player.cords.x/10,i=this._player.cords.y/10;switch(t){case"left":let n=e-1;return!0!==this._maze[i][n];case"right":let s=e+1;return!0!==this._maze[i][s];case"up":let a=i-1;return!0!==this._maze[a][e];case"down":let r=i+1;return!0!==this._maze[r][e]}}checkWinner(){return 500===this._player.cords.x&&490===this._player.cords.y}generateMaze(t,e){let i=t*e-1;if(i<0)return void alert("illegal maze dimensions");let n=[];for(let e=0;e<t+1;e++)n[e]=[];let s=[];for(let e=0;e<t+1;e++)s[e]=[];let a=[Math.floor(Math.random()*t),Math.floor(Math.random()*e)],r=[a],h=[];for(let i=0;i<t+2;i++){h[i]=[];for(let n=0;n<e+1;n++)h[i].push(i>0&&i<t+1&&n>0&&(i!=a[0]+1||n!=a[1]+1))}for(;0<i;){let t=[[a[0]+1,a[1]],[a[0],a[1]+1],[a[0]-1,a[1]],[a[0],a[1]-1]],e=[];for(let i=0;i<4;i++)h[t[i][0]+1][t[i][1]+1]&&e.push(t[i]);if(e.length){i-=1;let t=e[Math.floor(Math.random()*e.length)];h[t[0]+1][t[1]+1]=!1,t[0]==a[0]?n[t[0]][(t[1]+a[1]-1)/2]=!0:s[(t[0]+a[0]-1)/2][t[1]]=!0,r.push(a=t)}else a=r.pop()}return{x:t,y:e,horiz:n,verti:s}}displayMaze(t){let e=[];for(let i=0;i<2*t.x+1;i++){let n=[];if(0==i%2)for(let e=0;e<2*t.y+1;e++)0==e%2?n[e]=!0:i>0&&t.verti[i/2-1][Math.floor(e/2)]?n[e]=!1:n[e]=!0;else for(let e=0;e<2*t.y+1;e++)0==e%2?e>0&&t.horiz[(i-1)/2][e/2-1]?n[e]=!1:n[e]=!0:n[e]=!1;0==i&&(n[1]=!1),2*t.x-1==i&&(n[2*t.y]=!1),e.push(n)}return e}}class h extends n{constructor(t){super(),this._id="Enemy";const e=10+t;let i=0;for(let n=1;n<=t;n++)i+=e+Math.floor(.1*n);this._health={basic:i,current:i},this._basicDmg=t+1,this._level=t,this._name=this.getRandomName(),this._coins=Math.floor(Math.random()*(10*t)+10*t)}get name(){return this._name}getRandomName(){return["Rat","Wolf","Scarecrow","Bandit","Werewolf","Vampir","Gnome"][Math.floor(7*Math.random())]}}class o{constructor(t){this._player=t,this._enemy=new h(this._player.level),this._isPlayerRound=!0,this._interface=`<div class="fight">\n            <div class="fight__main">\n                <div class="fight__statistics">\n                    <h2>Player</h2>\n                    <canvas class="fight__health-bar" id="HeroHealth" width="100px" height="20px"></canvas>\n                    <div>Basic damage: ${this._player.basicDmg}</div>\n                </div>\n                <div class="fight__statistics">\n                    <h2>${this._enemy.name}</h2>\n                    <canvas class="fight__health-bar" id="EnemyHealth" width="100px" height="20px"></canvas>\n                    <div>Basic damage: ${this._enemy.basicDmg}</div>\n                </div>\n            </div>\n        <div id="returnToMenu">\n        </div>\n        <div class="console">\n            <fieldset>\n                <legend>Fight history:</legend>\n                <ul id="fightConsole">\n                </ul>\n            </fieldset>\n        </div>\n        </div>`}get interface(){return this._interface}startFight(t,e){e(this._player,"health","HeroHealth",100,20),e(this._enemy,"health","EnemyHealth",100,20);const i=setInterval(()=>{if(this._player.isAlive&&this._enemy.isAlive)if(!0===this._isPlayerRound){const t=this._player.Attack(this._enemy);if(e(this._enemy,"health","EnemyHealth",100,20),this.createLi(this._enemy.name+" lost "+t+" healt points"),!1===this._enemy.isAlive)return void this.createLi("Enemy is dead");this._isPlayerRound=!this._isPlayerRound}else{const t=this._enemy.Attack(this._player);if(e(this._player,"health","HeroHealth",100,20),this.createLi(this._player.id+" lost "+t+" healt points"),!1===this._player.isAlive)return void this.createLi("Player is dead");this._isPlayerRound=!this._isPlayerRound}else{if(clearInterval(i),!1===this._enemy.isAlive){const t=this._player.gainExp(this._enemy.level);this._player.coins+=this._enemy.coins,this.createLi(`You gain ${t}xp and ${this._enemy.coins} coins`)}t()}},1e3)}createLi(t){const e=document.createElement("li"),i=document.createTextNode(t);e.appendChild(i),document.getElementById("fightConsole").appendChild(e)}}class l{constructor(t){this._player=t,this.interface=`\n            <div class="store">\n                <div class="shop__player">\n                    <p id="playerCoins">Player coins: ${this._player.coins}</p>\n                    <p id="playerHP">Player health potions: ${this._player.healthPotions}</p>\n                </div>\n                <div class="store__offers">\n                    <div class="store__healthPoints">\n                        <p>Price for health potion: 5 coins</p>\n                        <div class="store__buttons">\n                            <button id="buyHP1" type="button">Buy 1</button>\n                            <button id="buyHP5" type="button">Buy 5</button>\n                            <button id="buyHP10" type="button">Buy 10</button>\n                        </div>\n                    </div>\n                </div>\n                <div class="store__info">\n                </div>\n                <div id="returnToMenu">\n                </div>\n            </div>`}init(t){document.getElementById("buyHP1").addEventListener("click",()=>{this.buy("healthPotions",1)}),document.getElementById("buyHP5").addEventListener("click",()=>{this.buy("healthPotions",5)}),document.getElementById("buyHP10").addEventListener("click",()=>{this.buy("healthPotions",10)}),t()}buy(t,e){if(this._player.coins>=5*e){const i=5*e;this._player.coins-=i,this._player[t]+=e,document.querySelector(".store__info").innerHTML=`<span>You bought ${e} ${t} for ${i} coins</span>`,document.getElementById("playerCoins").textContent="Player coins: "+this._player.coins,"healthPotions"===t&&(document.getElementById("playerHP").textContent="Player health potions: "+this._player.healthPotions)}else document.querySelector(".store__info").innerHTML="<span>Not enough coins</span>"}}class c{constructor(t){this._player=new s(t.health,t.dmg),this._mainMenu=document.getElementById("main")}createMenu(){creator.innerHTML=`<h1>Your Champion:</h1>\n        <h3 id="points">Stats:</h3>\n        <div class="stats">\n            <div class="bar healthBar">\n                Health: <canvas class="healthBar__canv" id="HB" width="200px" height="32px"></canvas>\n            </div>\n            <div class="bar expBar">\n                Experience: <canvas class="expBar__canv" id="EB" width="200px" height="32px"></canvas>\n            </div>\n            <div class="level">\n                Level: ${this._player.level}\n            </div>\n            <div class="damage">\n                Damage: ${this._player.basicDmg}\n            </div>\n                <p>Coins: ${this._player.coins}</p>\n                <p id="HP_text">Health Potions: ${this._player.healthPotions}</p>\n        </div>`,this._mainMenu.innerHTML='<div class="buttons">\n            <button class="button" id="fightButton" type="button">Fight</button>\n            <button class="button" id="healButton" type="button">Drink Healing Potion</button>\n            <button class="button" id="reviveButton" type="button">Revive Hero</button>\n            <button class="button" id="store" type="button">Store</button>\n        </div>\n        ',document.getElementById("fightButton").addEventListener("click",()=>{this.Fight()}),document.getElementById("healButton").addEventListener("click",()=>{this.drinkHP()}),document.getElementById("reviveButton").addEventListener("click",()=>{this.Revive()}),document.getElementById("store").addEventListener("click",()=>{this.Store()}),this.checkPlayerStatus(),this.drawBar(this._player,"health","HB",200,32),this.drawBar(this._player,"experience","EB",200,32)}checkPlayerStatus(){!1===this._player.isAlive?(document.getElementById("fightButton").disabled=!0,document.getElementById("healButton").disabled=!0,document.getElementById("reviveButton").disabled=!1):(document.getElementById("fightButton").disabled=!1,document.getElementById("healButton").disabled=!1,document.getElementById("reviveButton").disabled=!0)}Fight(){const t=new o(this._player);this._mainMenu.innerHTML=t.interface,t.startFight(this.createBackToMenuButt.bind(this),this.drawBar)}drinkHP(){this._player.healHero(),this.drawBar(this._player,"health","HB",200,32),document.getElementById("HP_text").textContent="Health Potions: "+this._player.healthPotions}Revive(){this._mainMenu.innerHTML='\n            <div class="maze-box">\n                <canvas id="maze" width="510" height="510"></canvas>\n            </div>\n            <div id="returnToMenu"></div>\n        ';const t=new r;t.draw();const e=i=>{switch(i.preventDefault(),i.keyCode){case 37:t.checkMove("left")&&t.player.moveLeft(),t.draw();break;case 38:t.checkMove("up")&&t.player.moveUp(),t.draw();break;case 39:t.checkMove("right")&&t.player.moveRight(),t.draw();break;case 40:t.checkMove("down")&&t.player.moveDown(),t.draw()}!0===t.checkWinner()&&(document.removeEventListener("keydown",e),this._player.isAlive=!0,this._player.health.current=5,this.createBackToMenuButt())};document.addEventListener("keydown",e)}Store(){const t=new l(this._player);this._mainMenu.innerHTML=t.interface,t.init(this.createBackToMenuButt.bind(this))}createBackToMenuButt(){const t=document.createElement("button"),e=document.createTextNode("Back to Main Menu");t.setAttribute("type","button"),t.addEventListener("click",this.createMenu.bind(this)),document.getElementById("returnToMenu").appendChild(t),t.appendChild(e)}drawBar(t,e,i,n,s){const a=t[e].current,r=t[e].basic,h=Math.round(n*a/r),o=document.getElementById(i);if(o.getContext){let t=o.getContext("2d");t.clearRect(0,0,n,s),"health"===e&&(t.fillStyle="rgb(200, 0, 0)"),"experience"===e&&(t.fillStyle="rgb(240, 201, 48)"),t.fillRect(0,0,h,s),t.fillStyle="white",t.font=o.height/2+"px Atma",t.textAlign="center",t.fillText(a+"/"+r,o.width/2,o.height/2+o.height/8)}}}const d=new class{constructor(){this._avaliablePoints=2,this._healthPoints=10,this._dmgPoints=2,this._stats}get stats(){return this._stats}get avaliablePoints(){return this._avaliablePoints}get healthPoints(){return this._healthPoints}get dmgPoints(){return this._dmgPoints}addPoints(t){0===this._avaliablePoints?console.log("0 avaliablePoints"):(this._avaliablePoints-=1,!0===t?this._healthPoints+=1:this._dmgPoints+=1),"health"===t?document.getElementById("healthPoints").innerHTML="Health: "+this._healthPoints:document.getElementById("dmgPoints").innerHTML="Damage: "+this._dmgPoints,document.getElementById("points").innerHTML="Avaliable points: "+this._avaliablePoints}removePoints(t){!0===t?this._healthPoints>10?(this._avaliablePoints+=1,this._healthPoints-=1):console.log("10 health points is minimum"):this._dmgPoints>2?(this._avaliablePoints+=1,this._dmgPoints-=1):console.log("Zero dmgPoints"),"health"===t?document.getElementById("healthPoints").innerHTML="Health: "+this._healthPoints:document.getElementById("dmgPoints").innerHTML="Damage: "+this._dmgPoints,document.getElementById("points").innerHTML="Avaliable points: "+this._avaliablePoints}updateStats(){this._stats={health:this._healthPoints,dmg:this._dmgPoints}}};let u;document.getElementById("creator").innerHTML=`<h1>Create Character</h1>\n    <h3 id="points">Avaliable points: ${d.avaliablePoints}</h3>\n    <div class="stats">\n        <div class="health">\n            <button id="minusH" type="button">-</button>\n            <span id="healthPoints">Health: ${d.healthPoints}</span>\n            <button id="plusH" type="button">+</button>\n        </div>\n        <div class="damage">\n            <button id="minusD" type="button">-</button>\n            <span id="dmgPoints">Damage: ${d.dmgPoints}</span>\n            <button id="plusD" type="button">+</button>\n        </div>\n        <div class="confirm">\n            <button id="confirmButt" type="button">Confirm</button>\n        </div>\n        <div id="confirmAlert">\n        </div>\n    </div>`,document.querySelector("#minusH").addEventListener("click",()=>{d.removePoints(!0)}),document.querySelector("#plusH").addEventListener("click",()=>{d.addPoints(!0)}),document.querySelector("#minusD").addEventListener("click",()=>{d.removePoints(!1)}),document.querySelector("#plusD").addEventListener("click",()=>{d.addPoints(!1)}),document.querySelector("#confirmButt").addEventListener("click",function(){0!=d.avaliablePoints?document.getElementById("confirmAlert").innerHTML="Hand out all the points!":(d.updateStats(),(u=new c(d.stats)).createMenu())})}]);