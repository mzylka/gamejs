!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class s{constructor(){this.stats={maxHealth:void 0,basicDmg:void 0},this.isAlive=!0,this.health,this.level=1,this.id}Attack(t){if(!1!==t.returnStatus){let e=this.stats.basicDmg;return t.takeDmg(e),e}}takeDmg(t){this.health>t?this.health=this.health-t:(this.health=0,this.isAlive=!1)}updateHealth(){this.maxHealth+=1,this.health+=1}}class n extends s{constructor(t,e){super(),this.id="Hero",this.stats={maxHealth:t,basicDmg:e},this.health=t,this.skillPoints=0,this.exp=0,this.maxExp=50,this.healthPotions=100,this.coins=10}get Potions(){return this.healthPotions}takePotion(){this.healthPotions+=1}healHero(){let t=this.stats.maxHealth-this.health;if(!(this.health<this.stats.maxHealth))return console.log("Full Health"),!1;t>=5&&(this.health+=5),t<5&&(this.health+=t),this.healthPotions-=1}reviveHero(){this.isAlive=!0,this.health+=Math.round(this.stats.maxHealth/2)}levelUp(){this.level+=1,this.maxExp+=this.maxExp+Math.round(.2*this.maxExp),this.stats.maxHealth+=3,this.health=this.stats.maxHealth,this.stats.basicDmg+=2,this.skillPoints=1}gainExp(t){const e=10*t,i=this.maxExp-this.exp;return e>=i?(this.exp=e-i,this.levelUp()):this.exp+=e,e}gainCoins(t){return this.coins+=t,t}}class a{constructor(){this.cords={x:10,y:0}}checkBorder(){return 0!==this.cords.y}moveUp(){!0===this.checkBorder()&&(this.cords.y-=10)}moveDown(){this.cords.y+=10}moveRight(){this.cords.x+=10}moveLeft(){this.cords.x-=10}}class h{constructor(){this.canvas=document.getElementById("maze"),this.ctx=this.canvas.getContext("2d"),this.player=new a,this.maze=this.displayMaze(this.generateMaze(25,25))}start(){this.draw(),this.playerControls()}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.drawGrid(),this.drawMaze(),this.drawEndPoint(),this.drawPlayer()}drawGrid(){const t=this.ctx;t.fillStyle="rgb(192, 192, 192)",t.fillRect(0,0,510,510);for(let e=0;e<510;e+=10)t.moveTo(e,0),t.lineTo(e,510);for(let e=0;e<510;e+=10)t.moveTo(0,e),t.lineTo(510,e);t.strokeStyle="#ddd",t.stroke()}drawMaze(){const t=this.ctx;let e=0;this.maze.forEach(i=>{let s=0;i.forEach(i=>{!0===i&&(t.fillStyle="rgb(0, 0, 0)",t.fillRect(s,e,10,10)),s+=10}),e+=10})}drawPlayer(){const t=this.ctx;t.fillStyle="rgb(255, 0, 0)",t.fillRect(this.player.cords.x,this.player.cords.y,10,10)}drawEndPoint(){const t=this.ctx;t.fillStyle="rgb(0, 200, 0)",t.fillRect(500,490,10,10)}playerControls(){document.addEventListener("keydown",t=>{if(!0===this.checkWinner())return!0;switch(t.keyCode){case 37:this.checkMove("left")&&this.player.moveLeft(),this.draw();break;case 38:this.checkMove("up")&&this.player.moveUp(),this.draw();break;case 39:this.checkMove("right")&&this.player.moveRight(),this.draw();break;case 40:this.checkMove("down")&&this.player.moveDown(),this.draw()}})}checkMove(t){let e=this.player.cords.x/10,i=this.player.cords.y/10;switch(t){case"left":let s=e-1;return!0!==this.maze[i][s];case"right":let n=e+1;return!0!==this.maze[i][n];case"up":let a=i-1;return!0!==this.maze[a][e];case"down":let h=i+1;return!0!==this.maze[h][e]}}checkWinner(){return 500===this.player.cords.x&&490===this.player.cords.y}generateMaze(t,e){let i=t*e-1;if(i<0)return void alert("illegal maze dimensions");let s=[];for(let e=0;e<t+1;e++)s[e]=[];let n=[];for(let e=0;e<t+1;e++)n[e]=[];let a=[Math.floor(Math.random()*t),Math.floor(Math.random()*e)],h=[a],l=[];for(let i=0;i<t+2;i++){l[i]=[];for(let s=0;s<e+1;s++)l[i].push(i>0&&i<t+1&&s>0&&(i!=a[0]+1||s!=a[1]+1))}for(;0<i;){let t=[[a[0]+1,a[1]],[a[0],a[1]+1],[a[0]-1,a[1]],[a[0],a[1]-1]],e=[];for(let i=0;i<4;i++)l[t[i][0]+1][t[i][1]+1]&&e.push(t[i]);if(e.length){i-=1;let t=e[Math.floor(Math.random()*e.length)];l[t[0]+1][t[1]+1]=!1,t[0]==a[0]?s[t[0]][(t[1]+a[1]-1)/2]=!0:n[(t[0]+a[0]-1)/2][t[1]]=!0,h.push(a=t)}else a=h.pop()}return{x:t,y:e,horiz:s,verti:n}}displayMaze(t){let e=[];for(let i=0;i<2*t.x+1;i++){let s=[];if(0==i%2)for(let e=0;e<2*t.y+1;e++)0==e%2?s[e]=!0:i>0&&t.verti[i/2-1][Math.floor(e/2)]?s[e]=!1:s[e]=!0;else for(let e=0;e<2*t.y+1;e++)0==e%2?e>0&&t.horiz[(i-1)/2][e/2-1]?s[e]=!1:s[e]=!0:s[e]=!1;0==i&&(s[1]=!1),2*t.x-1==i&&(s[2*t.y]=!1),e.push(s)}return console.log(e),e}}class l extends s{constructor(t){super();let e,i=10*t;for(let s=1;s<=t;s++)e=i+.1*i;this.stats={maxHealth:e,basicDmg:e/4},this.id="Enemy",this.health=e,this.level=t,this.name=this.getRandomName(),this.coins=Math.floor(Math.random()*(10*t)+(10*t-9))}getRandomName(){return["Rat","Wolf","Scarecrow","Bandit","Werewolf","Vampir","Gnome"][Math.floor(7*Math.random())]}}class o{constructor(t){this.player=t,this.enemy=new l(this.player.level),this.isPlayerRound=!0,this.isFightEnd=!1,this.interface=`<div class="fight">\n        <div class="fight__statistics">\n            <h2>Name: ${this.player.id}</h2>\n\n            <span>Health: ${this.player.health}</span>\n            <span>Damage: ${this.player.stats.basicDmg}</span>\n\n            <canvas class="fight__health-bar" id="${this.player.id+"Health"}" width="100px" height="20px"></canvas>\n        </div>\n        <div class="fight__statistics">\n            <h2>Name: ${this.enemy.name}</h2>\n\n            <span>Health: ${this.enemy.health}</span>\n            <span>Damage: ${this.enemy.stats.basicDmg}</span>\n            <canvas class="fight__health-bar" id="${this.enemy.id+"Health"}" width="100px" height="20px"></canvas>\n        </div>\n        <div id="returnToMenu">\n        </div>\n        <div>\n            <fieldset>\n                <legend>Fight history:</legend>\n                <ul id="fightConsole">\n                </ul>\n            </fieldset>\n        </div>\n        </div>`}startFight(t){this.drawHealth(this.player.id,this.player.health,this.player.stats.maxHealth),this.drawHealth(this.enemy.id,this.enemy.health,this.enemy.stats.maxHealth);const e=setInterval(()=>{if(this.player.isAlive&&this.enemy.isAlive)if(!0===this.isPlayerRound){const t=this.player.Attack(this.enemy);if(this.drawHealth(this.enemy.id,this.enemy.health,this.enemy.stats.maxHealth),this.createLi(this.enemy.name+" lost "+t+" healt points"),!1===this.enemy.isAlive)return void this.createLi("Enemy is dead");this.isPlayerRound=!this.isPlayerRound}else{const t=this.enemy.Attack(this.player);if(this.drawHealth(this.player.id,this.player.health,this.player.stats.maxHealth),this.createLi(this.player.id+" lost "+t+" healt points"),!1===this.player.isAlive)return void this.createLi("Player is dead");this.isPlayerRound=!this.isPlayerRound}else{if(clearInterval(e),!1===this.enemy.isAlive){const t=this.player.gainExp(this.enemy.level),e=this.player.gainCoins(this.enemy.coins);this.createLi(`You gain ${t}xp and ${e}coins`)}t()}console.log("tura")},1e3)}createLi(t){let e=document.createElement("li"),i=document.createTextNode(t);e.appendChild(i),document.getElementById("fightConsole").appendChild(e)}drawHealth(t,e,i){let s=Math.round(100*e/i);const n=document.getElementById(t+"Health");if(n.getContext){let t=n.getContext("2d");t.clearRect(0,0,100,20),t.fillStyle="rgb(200, 0, 0)",t.fillRect(0,0,s,20)}}}class r{constructor(t){this.player=new n(t.health,t.dmg),this.mainMenu=document.getElementById("main")}createMenu(){creator.innerHTML=`<h1>Your Champion:</h1>\n        <h3 id="points">Stats:</h3>\n        <div class="stats">\n            <div class="health">\n                <h4>MaxHealth: ${this.player.stats.maxHealth}</h4>\n                <h4 id="heroHealth">Health: ${this.player.health}</h4>\n            </div>\n            <div class="damage">\n                <h4>Damage: ${this.player.stats.basicDmg}</h4>\n            </div>\n            <div class="experience">\n                <h5>Level: ${this.player.level}</h5>\n                <h5>Max Experience: ${this.player.maxExp}</h5>\n                <h5>Experience: ${this.player.exp}</h5>\n            </div>\n            <h5>Coins: ${this.player.coins}</h5>\n        </div>`,this.mainMenu.innerHTML='<div class="Buttons">\n        <button class="button" id="fightButton" type="button">Fight</button>\n        <button class="button" id="healButton" type="button">Drink Healing Potion</button>\n        <button class="button" id="reviveButton" type="button">Revive Hero</button>\n        <button class="button" id="buyPoints" type="button">Buy Points</button>\n        </div>\n        ',document.querySelector("#fightButton").addEventListener("click",()=>{this.Fight()}),document.querySelector("#healButton").addEventListener("click",()=>{this.Heal()}),document.querySelector("#reviveButton").addEventListener("click",()=>{this.Revive()}),document.querySelector("#buyPoints").addEventListener("click",()=>{this.buyPoints()}),this.checkPlayerStatus()}checkPlayerStatus(){!1===this.player.isAlive?(document.getElementById("fightButton").disabled=!0,document.getElementById("healButton").disabled=!0,document.getElementById("reviveButton").disabled=!1):(document.getElementById("fightButton").disabled=!1,document.getElementById("healButton").disabled=!1,document.getElementById("reviveButton").disabled=!0)}Fight(){const t=new o(this.player);this.mainMenu.innerHTML=t.interface,t.startFight(this.createBackToMenuButt.bind(this))}Heal(){this.player.healHero(),document.getElementById("heroHealth").textContent=`Health: ${this.player.health}`}Revive(){this.mainMenu.innerHTML='\n            <canvas id="maze" width="510" height="510"></canvas>\n            <div id="returnToMenu"></div>\n        ';const t=new h;t.draw();const e=i=>{switch(i.preventDefault(),i.keyCode){case 37:t.checkMove("left")&&t.player.moveLeft(),t.draw();break;case 38:t.checkMove("up")&&t.player.moveUp(),t.draw();break;case 39:t.checkMove("right")&&t.player.moveRight(),t.draw();break;case 40:t.checkMove("down")&&t.player.moveDown(),t.draw()}!0===t.checkWinner()&&(document.removeEventListener("keydown",e),this.player.isAlive=!0,this.player.health=5,this.createBackToMenuButt())};document.addEventListener("keydown",e)}createBackToMenuButt(){const t=document.createElement("button"),e=document.createTextNode("Back to Menu");t.setAttribute("type","button"),t.addEventListener("click",this.createMenu.bind(this)),document.getElementById("returnToMenu").appendChild(t),t.appendChild(e)}}const d=new class{constructor(){this.avaliablePoints=5,this.healthPoints=12,this.dmgPoints=2,this.stats=void 0}removeHealthPoints(){this.healthPoints>=13?(this.avaliablePoints+=1,this.healthPoints-=1):console.log("10 health points is minimum"),document.getElementById("healthPoints").innerHTML="Health: "+this.healthPoints,document.getElementById("points").innerHTML="Avaliable points: "+this.avaliablePoints}addHealthPoints(){0==this.avaliablePoints?console.log("0 avaliablePoints"):(this.avaliablePoints-=1,this.healthPoints+=1),document.getElementById("healthPoints").innerHTML="Health: "+this.healthPoints,document.getElementById("points").innerHTML="Avaliable points: "+this.avaliablePoints}removeDmgPoints(){this.dmgPoints>=3?(this.avaliablePoints+=1,this.dmgPoints-=1):console.log("Zero dmgPoints"),document.getElementById("dmgPoints").innerHTML="Damage: "+this.dmgPoints,document.getElementById("points").innerHTML="Avaliable points: "+this.avaliablePoints}addDmgPoints(){0==this.avaliablePoints?console.log("Zero avaliablePoints"):(this.avaliablePoints=this.avaliablePoints-1,this.dmgPoints=this.dmgPoints+1),document.getElementById("dmgPoints").innerHTML="Damage: "+this.dmgPoints,document.getElementById("points").innerHTML="Avaliable points: "+this.avaliablePoints}updateStats(){this.stats={health:this.healthPoints,dmg:this.dmgPoints}}getStats(){return this.stats}getAvaliablePoints(){return this.avaliablePoints}getHealthPoints(){return this.healthPoints}getDmgPoints(){return this.dmgPoints}};let c;document.getElementById("creator").innerHTML=`<h1>Create Character</h1>\n    <h3 id="points">Avaliable points: ${d.getAvaliablePoints()}</h3>\n    <div class="stats">\n        <div class="health">\n            <button id="minusH" type="button">-</button>\n            <span id="healthPoints">Health: ${d.getHealthPoints()}</span>\n            <button id="plusH" type="button">+</button>\n        </div>\n        <div class="damage">\n            <button id="minusD" type="button">-</button>\n            <span id="dmgPoints">Damage: ${d.getDmgPoints()}</span>\n            <button id="plusD" type="button">+</button>\n        </div>\n        <div class="confirm">\n            <button id="confirmButt" type="button">Confirm</button>\n        </div>\n        <div id="confirmAlert">\n        </div>\n    </div>`,document.querySelector("#minusH").addEventListener("click",d.removeHealthPoints.bind(d)),document.querySelector("#plusH").addEventListener("click",d.addHealthPoints.bind(d)),document.querySelector("#minusD").addEventListener("click",d.removeDmgPoints.bind(d)),document.querySelector("#plusD").addEventListener("click",d.addDmgPoints.bind(d)),document.querySelector("#confirmButt").addEventListener("click",function(){0!=d.getAvaliablePoints()?document.getElementById("confirmAlert").innerHTML="Hand out all the points!":(d.updateStats(),(c=new r(d.getStats())).createMenu())})}]);